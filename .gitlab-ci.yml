# Pipeline variables
variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml -Dmaven.repo.local=.m2/repository --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  GIT_SUBMODULE_STRATEGY: recursive
  NODE_OPTIONS: "--max-old-space-size=8192"
  DOCKER_DISABLE: "true"
  DOCKER_EXCLUDE_DIRS: "georchestra-signalement-mapstore-addon/MapStore2,georchestra-signalement-mapstore-addon/mapstore2-georchestra,georchestra-signalement-mapstore-management-addon/MapStore2,georchestra-signalement-mapstore-management-addon/mapstore2-georchestra,node_modules,vendor"

# Cache policy - Share target folders between jobs - Note that key is related to a commit and is purged automatically after pipeline execution
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - $CI_PROJECT_DIR/.m2/repository/**/*
    - $CI_PROJECT_DIR/**/target/**/*

include:
  - project: 'boost/template-ci/pipelines/common'
    file: '/docker/docker-template.yml'
#    ref: 'SUPDLVR-4031'
  - project: 'bots/trivy-script'
    file: '/trivy-template-job.yml'   

default:
  image: maven:3.9.0-eclipse-temurin-17
  before_script:
    - apt update && apt install -y gettext-base build-essential
    - envsubst '${MVN_GROUP} ${MVN_RELEASE} ${MVN_SNAPSHOTS}' < pom.xml > pom.subst && mv -f pom.subst pom.xml

# Stages definition
stages:
  - build
  - test
  - pre_docker
  - docker  
  - deploy
  - delivering

# Build job with maven plugin execution policies define in parent pom
.signalementapi:build:
  script:
    - mvn $MAVEN_CLI_OPTS -U clean package ${OPTS} -Pprod,mapfishapp-signalement
  stage: build
  tags: 
    - iaas
  artifacts:
    paths:
      - $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-*.jar
      - $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-*.war
      - $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-*-addon.zip
      - $CI_PROJECT_DIR/georchestra-signalement-mapstore-addon/dist/SignalementExtension.zip
      - $CI_PROJECT_DIR/georchestra-signalement-mapstore-management-addon/dist/SignalementManagementExtension.zip
      - $CI_PROJECT_DIR/georchestra-signalement-front-management/target/georchestra-signalement-front-management-angular-dist.zip
  interruptible: true

signalementapi:build:
  extends: .signalementapi:build
  except:
    refs:
      - master
      - open/master  

      
signalementapi:build:master:
  extends: .signalementapi:build
  only:
    refs:
      - master
      - open/master   
  variables:
    OPTS: "-DskipTests"  

# Sonar code quality analysis - note a full test coverage report through a jacoco.exec merged file in base project folder
.signalementapi:sonar:
  stage: test
  image: maven:3.9.9-eclipse-temurin-17
  tags: 
    - iaas  
  allow_failure: true
  script:
    - >
      mvn $MAVEN_CLI_OPTS -U compile sonar:sonar
      -Dsonar.host.url=$SONAR_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA
      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
      -Dsonar.gitlab.project_id=$CI_PROJECT_ID
      ${BRANCH}
  interruptible: true
  
signalementapi:sonar:
  extends: .signalementapi:sonar
  dependencies:
    - signalementapi:build
  except:
    refs:
      - master
      - open/master
  variables:
    BRANCH: -Dsonar.branch.name=$CI_COMMIT_REF_NAME
            

# On master, do not use branch parameter
signalementapi:sonar:master:
  extends: .signalementapi:sonar
  dependencies:
    - signalementapi:build:master
  only:
    refs:
      - open/master
      
# Copie des artifacts dans les répertoires des images dockers
signalementapi:pre_docker:
  stage: pre_docker
  only:
    refs:
      - master
      - open/master
      - open/develop
      - /^release.*/
      - /.*karbonification.*/

  script:
    - ls -l $CI_PROJECT_DIR/georchestra-signalement-api/target/
    - export POM_VERSION=`cat pom.xml | grep "<version>.*</version>" | head -n 1 | awk -F'[><]' '{print $3}'`
    - echo "POM_VERSION=${POM_VERSION}"	
    - cp $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-${POM_VERSION}.jar $CI_PROJECT_DIR/docker/rennes-metropole/signalement-backend/georchestra-signalement-api.jar
    - cp $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-${POM_VERSION}.jar $CI_PROJECT_DIR/docker/template/signalement-backend/georchestra-signalement-api.jar
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-front-management/target/georchestra-signalement-front-management-angular-dist.zip $CI_PROJECT_DIR/docker/rennes-metropole/signalement-front-management/georchestra-signalement-front-management-angular-dist.zip
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-front-management/target/georchestra-signalement-front-management-angular-dist.zip $CI_PROJECT_DIR/docker/template/signalement-front-management/georchestra-signalement-front-management-angular-dist.zip
  artifacts:
    paths:
      - '$CI_PROJECT_DIR/georchestra-signalement-api/target/**.war'
      - '$CI_PROJECT_DIR/georchestra-signalement-api/target/**.jar'
      - '$CI_PROJECT_DIR/georchestra-signalement-api/target/*.zip'
      - '$CI_PROJECT_DIR/docker/**/**.war'
      - '$CI_PROJECT_DIR/docker/**/**.zip'
      - '$CI_PROJECT_DIR/docker/**/**.jar'

signalementapi:docker2:build:
  extends: ['.docker:build']
  needs:
    - signalementapi:pre_docker
  dependencies:
    - signalementapi:pre_docker
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /.*develop/ || $CI_COMMIT_BRANCH =~ /.*master/ || $CI_COMMIT_BRANCH =~ /^release.*/ || $CI_COMMIT_BRANCH =~ /.*karbonification.*/'
  timeout: 1h
  artifacts:
    paths:
      - '$CI_PROJECT_DIR/georchestra-signalement-api/target/**.war'
      - '$CI_PROJECT_DIR/georchestra-signalement-api/target/**.jar'
      - '$CI_PROJECT_DIR/georchestra-signalement-api/target/*.zip'   
      - '$CI_PROJECT_DIR/docker/**/**.war'
      - '$CI_PROJECT_DIR/docker/**/**.zip'
      - '$CI_PROJECT_DIR/docker/**/**.jar'       

trivyscan:back: 
  extends: 
    - .trivy-scan
  stage: docker
  needs:
    - signalementapi:docker2:build
  dependencies:
    - signalementapi:docker2:build
  variables:
    TRIVY_DOCKER_SCAN: glregistry.boost.open.global/rennes-metropole/signalement/signalement-backend/signalement-backend:open-develop
  only:
    refs:
      - open/develop
      - karbonification

trivyscan:front: 
  extends: 
    - .trivy-scan
  stage: docker
  needs:
    - signalementapi:docker2:build
  dependencies:
    - signalementapi:docker2:build
  variables:
    TRIVY_DOCKER_SCAN: glregistry.boost.open.global/rennes-metropole/signalement/signalement-backend/signalement-front-management:open-develop
  only:
    refs:
      - open/develop

.signalementapi:deploy:
  stage: deploy
  tags: 
    - iaas
  cache: {}
  before_script:
    - cat /etc/os-release
    - apt update && apt install -y openssh-client ansible
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ansible_private_key" | base64 -d)
  script:
    - ls $CI_PROJECT_DIR/georchestra-signalement-api/target/
    - ls $CI_PROJECT_DIR/georchestra-signalement-mapstore*
    - export POM_VERSION=`cat pom.xml | grep "<version>.*</version>" | head -n 1 | awk -F'[><]' '{print $3}'`
    - echo "POM_VERSION=${POM_VERSION}"
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-${POM_VERSION}.war $CI_PROJECT_DIR/ansible/dockerize/files/georchestra-signalement-api.war
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-${POM_VERSION}.jar $CI_PROJECT_DIR/ansible/dockerize/files/georchestra-signalement-api.jar 
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-api/target/georchestra-signalement-api-${POM_VERSION}-addon.zip $CI_PROJECT_DIR/ansible/dockerize/files/georchestra-signalement-api-addon.zip
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-mapstore-addon/dist/SignalementExtension.zip $CI_PROJECT_DIR/ansible/dockerize/files/SignalementExtension.zip
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-mapstore-management-addon/dist/SignalementManagementExtension.zip $CI_PROJECT_DIR/ansible/dockerize/files/SignalementManagementExtension.zip
    - cp -f $CI_PROJECT_DIR/georchestra-signalement-front-management/target/georchestra-signalement-front-management-angular-dist.zip $CI_PROJECT_DIR/ansible/dockerize/files/georchestra-signalement-front-management.zip
    - cd $CI_PROJECT_DIR/ansible  
    #- chmod og-rw key/id_rsa
    - cp ${ANSIBLE_VAR_FILE} $HOME/signalement_var.yml
    - ansible-playbook signalement-docker.yml -v -i "${SERVER}," -u root --ssh-common-args=-oStrictHostKeyChecking=no
  interruptible: true
  when: manual
 
signalementapi:deploy:
  extends: .signalementapi:deploy
  dependencies:
    - signalementapi:build
  only:
    refs:
      - open/develop
  variables:
    SERVER: "ren1vml0096"
    ANSIBLE_VAR_FILE: signalement_dev_var.yml

signalementapi:deploy:master:
  extends: .signalementapi:deploy
  dependencies:
    - signalementapi:build:master
  only:
    refs:
      - open/master
  variables:
    SERVER: "ren1vml0095"
    ANSIBLE_VAR_FILE: signalement_rct_var.yml


## #####
# Déploiement Karbon
.signalementapi:deploy-karbon:prepare:
  stage: pre_docker
  script:
    - echo "send automation to georchestra deploiement"
  artifacts:
    name: signalement-karbon-${TARGET_ENV}
    paths:
      - '$CI_PROJECT_DIR/automation/**'

signalementapi:deploy-karbon:prepare:dev:
  extends: .signalementapi:deploy-karbon:prepare
  only:
    refs:
      - open/develop
      - /.*karbonification.*/
  variables:
    TARGET_ENV: dev

signalementapi:deploy-karbon:prepare:qua:
  extends: .signalementapi:deploy-karbon:prepare
  only:
    refs:
      - open/master
      - /.*karbonification.*/
  variables:
    TARGET_ENV: qua	

.signalementapi:deploy-karbon:
  stage: deploy
  trigger:
    project: rennes-metropole/georchestra/georchestra-service-deployment
    strategy: depend
    branch: master
  variables:
    TRIGGERED_BY: signalement
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID

signalementapi:deploy-karbon:dev:
  extends: .signalementapi:deploy-karbon
  needs:
    - job: signalementapi:deploy-karbon:prepare:dev
      artifacts: true
  only:
    refs:
      - open/develop
      - /.*karbonification.*/
  variables:
    TARGET_ENV: dev
    FORCE_POD: "true"
    PARENT_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    PARENT_SERVICE_LOGIN: $SERVICE_LOGIN
    PARENT_SERVICE_TOKEN: $SERVICE_TOKEN
    PARENT_SERVICE_ACCESS_TOKEN: $SERVICE_ACCESS_TOKEN
    PARENT_PROJECT_ID: $CI_PROJECT_ID
    PARENT_STAGE_PREFIX: signalementapi:deploy-karbon:prepare

signalementapi:deploy-karbon:qua:
  extends: .signalementapi:deploy-karbon
  needs:
    - job: signalementapi:deploy-karbon:prepare:qua
      artifacts: true
  only:
    refs:
      - open/master
      - /.*karbonification.*/
  variables:
    TARGET_ENV: dev
    FORCE_POD: "true"
    PARENT_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    PARENT_SERVICE_LOGIN: $SERVICE_LOGIN
    PARENT_SERVICE_TOKEN: $SERVICE_TOKEN
    PARENT_SERVICE_ACCESS_TOKEN: $SERVICE_ACCESS_TOKEN
    PARENT_PROJECT_ID: $CI_PROJECT_ID
    PARENT_STAGE_PREFIX: signalementapi:deploy-karbon:prepare
  when: manual


## Livraison Github
push-to-github:
  stage: delivering
  dependencies:
    - signalementapi:build
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
  script:
    - cd ci
    - apt install -y rsync
    - chmod +x push-to-github.sh
    - ./push-to-github.sh
  variables:
    SOURCE_REPOSITORY: $CI_PROJECT_DIR
    # Les variables GITHUB_RM_ACCOUNT, GITHUB_RM_LOGIN et GIT_TOKEN sont à définir manuellement avant de lancer le job
    GIT_REMOTE: "https://$GITHUB_RM_ACCOUNT:$GIT_TOKEN@github.com/sigrennesmetropole/geor_signalement.git"
    COMMIT_MESSAGE: $GITHUB_COMMIT_MESSAGE
